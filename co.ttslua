if not co then
    co = {}

    -- Exposed methods:

    function co.pause(timer_id)
        co._timers[timer_id].paused = true
    end

    function co.continue(timer_id)
        co._timers[timer_id].paused = false
    end

    function co.toggle(timer_id)
        co._timers[timer_id].paused = not co._timers[timer].paused
    end

    function co.stop(timer_id)
        if timer_id and co._timers[timer_id] then
            co._timers[timer_id].active = nil
            co._timers[timer_id].paused = nil
            co._timers[timer_id] = nil
        end
    end

    function co.schedule(delay, duration, calls, interval, halt, func, ...)
        -- Waits <delay> then calls <func>, <calls> times for <duration>,
        -- spaced <interval> between calls, stops when <func> returns <halt>
        -- <delay> and <duration> can be functions; they end when it stops being true
        -- <calls> can be 0 or nil to indicate infinite
        -- <interval> can be a function; it triggers whenever it becomes true
        -- <halt> can be a function, or nil to disable it
        local params = {...}
        local timer = co._create_timer()
        function routine()
            local delay = delay
            local ongoing = duration
            timer.last_tick = os.clock()
            timer.start_time = timer.last_tick
            if type(delay) ~= 'function' then
                timer.start_time = timer.start_time + delay
                delay = function()
                    return os.clock() < timer.start_time
                end
            end
            while timer.active and (timer.paused or delay()) do
                if timer.paused then
                    timer.start_time = timer.start_time + (os.clock() - timer.last_tick)
                end
                timer.last_tick = os.clock()
                coroutine.yield(0)
            end
            if timer.active then
                if ongoing == nil or ongoing == 0 then
                    ongoing = function() return true end
                elseif type(ongoing) ~= 'function' then
                    timer.end_time = os.clock() + duration
                    ongoing = function()
                        return os.clock() < timer.end_time
                    end
                end
                timer.calls = 0
                local still_calling
                if calls == nil or calls == 0 then
                    still_calling = function() return true end
                else
                    still_calling = function()
                        return timer.calls < calls
                    end
                end
                timer.next_time = os.clock()
                local triggered
                if type(interval) ~= 'function' then
                    timer.step = interval
                    timer.set_next_time = function()
                        timer.next_time = timer.next_time + timer.step
                    end
                    triggered = function()
                        local result = os.clock() >= timer.next_time
                        if result then
                            timer.set_next_time()
                        end
                        return result
                    end
                else
                    timer.state = interval()
                    triggered = function()
                        local result = interval()
                        if timer.state == result then
                            result = false
                        else
                            timer.state = result
                        end
                        return result
                    end
                end
                local stop_on = halt
                if stop_on ~= nil then
                    if type(halt) ~= 'function' then
                        stop_on = function()
                            return halt
                        end
                    end
                end
                while timer.active and ongoing() and still_calling() do
                    if timer.paused then
                        local delta = os.clock() - timer.last_tick
                        timer.end_time = timer.end_time + delta
                        timer.next_time = timer.next_time + delta
                    else
                        if triggered() then
                            timer.calls = timer.calls + 1
                            local result = func(unpack(params))
                            if stop_on ~= nil and result == stop_on() then
                                timer.active = false
                            end
                        end
                    end
                    timer.last_tick = os.clock()
                    coroutine.yield(0)
                end
            end
            co.stop(timer.id)
            return 1
        end
        startLuaCoroutine(self, 'routine')
        return timer.id
    end

    function co.after(delay, func, ...)
        -- Calls <func> with remaining parameters after <delay>
        -- <delay> can be in seconds, or a function
        -- When <delay> is a function the trigger happens when it stops being true
        return co.schedule(delay, nil, 1, 0, nil, func, unpack({...}))
    end

    function co.during(duration, func, ...)
        -- Calls <func> every tick with remaining parameters for <duration>
        -- <duration> can be in seconds, or a function
        -- When <duration> is a function calls will stop when it stops being true
        return co.schedule(0, duration, nil, 0, nil, func, unpack({...}))
    end

    function co.during_until(duration, halt, func, ...)
        -- Calls <func> every tick with remaining parameters for <duration>
        -- <duration> can be in seconds, or a function
        -- When <duration> is a function calls will stop when it stops being true
        -- If <func> returns <halt> then the coroutine stops
        return co.schedule(0, duration, nil, 0, halt, func, unpack({...}))
    end

    function co.every(interval, func, ...)
        -- Calls <func> with remaining parameters repeatedly, with a gap of <interval> seconds between
        -- If <interval> is a function then triggers every time it becomes true
        -- <interval> should have no side effects, and be consistent within a tick
        return co.schedule(0, nil, nil, interval, nil, func, unpack({...}))
    end

    function co.every_until(interval, halt, func, ...)
        -- Calls <func> with remaining parameters repeatedly, with a gap of <interval> seconds between
        -- If <interval> is a function then triggers every time it becomes true
        -- <interval> should have no side effects, and be consistent within a tick
        -- If <func> returns <halt> then the coroutine stops
        return co.schedule(0, nil, nil, interval, halt, func, unpack({...}))
    end


    -- camelCase
    co.everyUntil = co.every_until
    co.duringUntil = co.during_until


    -- Internal

    co._timers = {}
    co._last_timer_id = 0

    function co._create_timer()
        local timer = {}
        co._last_timer_id = co._last_timer_id + 1
        timer.id = co._last_timer_id
        co._timers[timer.id] = timer
        timer.active = true
        timer.paused = false
        return timer
    end
end
